import {Component, Inject, OnInit, ViewChild} from '@angular/core';
import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';
import {FormControl, FormGroup, Validators} from '@angular/forms';
import {Expert} from '../../../referentiel/general/experts/expert';
import {ReferentielGeneraleServiceService} from '../../../referentiel/general/referentiel-generale-service.service';
import moment from 'moment';
import {NewSinistre} from '../new-sinistre';
import { DocumentSinistre } from '../document-sinistre';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';

@Component({
  selector: 'app-modify-sinistre-vehicule',
  templateUrl: './modify-sinistre-vehicule.component.html',
  styleUrls: ['./modify-sinistre-vehicule.component.scss']
})
export class ModifySinistreVehiculeComponent implements OnInit {
  modifiedSinistre: NewSinistre = {
    id: null,
    idVehicule: null,
    dateSinistre: '',
    numeroSinistre: '',
    lieuSinistre: '',
    causeSinistre: '',
    natureSinistre: '',
    tier: '',
    adresseAssurance: '',
    assurance: '',
    circule: false,
    agePermis: 0,
    dateNotification: '',
    idExpert: null,
    dateExpertise: '',
    dateReexpertise: '',
    dateDebut: '',
    dateFin: '',
    montantReparation: 0,
    montantIndemnite: 0,
    observations: '',
  };
  modifySinistreForm = new FormGroup({
    numeroPlaque: new FormControl(null),
    dateSinistre: new FormControl(null),
    lieuSinistre: new FormControl(null),
    causeSinistre: new FormControl(null, Validators.required),
    natureSinistre: new FormControl(null),
    numeroSinistre: new FormControl(null),
    tier: new FormControl(null),
    adresse: new FormControl(null),
    assurance: new FormControl(null),
    circule: new FormControl(null),
    tiers: new FormControl(null),
    agePermis: new FormControl(null),
    expert: new FormControl(null),
    dateNotification: new FormControl(null),
    dateExpertise: new FormControl(null),
    dateReexpertise: new FormControl(null),
    dateDebut: new FormControl(null),
    dateFin: new FormControl(null),
    montantReparation: new FormControl(null),
    montantIndemnite: new FormControl(null),
    reference: new FormControl(null),
    observations: new FormControl(null),

  });
  ListExpert: Expert[] = [];
  displayedText='';
  selectedNewFile: File;
  ListDocuments: DocumentSinistre[] = [];
  @ViewChild(MatSort, {static: true}) sort: MatSort;
  displayedColumns: string[] = ['N°', 'documentName', 'delete', 'apercue'];
  dataSource = new MatTableDataSource<DocumentSinistre>(this.ListDocuments);
  tempDocument: DocumentSinistre = {nomDocument: '', adresseDocument: ''};
  //url: any;
  //tempDocument : String = null;

  constructor(public dialogRef: MatDialogRef<ModifySinistreVehiculeComponent>, @Inject(MAT_DIALOG_DATA) public data: any, private ReferentielGenerale: ReferentielGeneraleServiceService) {
    this.displayedText = 'Insérer un nouveau document';
    this.ReferentielGenerale.getListExpert().subscribe(value => {
      this.ListExpert = value;
      if (data.element.idExpert != null) {
        this.ListExpert.forEach(value1 => {
          if (value1.id === data.element.idExpert) {
            this.modifySinistreForm.controls.expert.patchValue(value1);
          }
        });
      }
    });
    this.patchInitialValues();
  }

  ngOnInit(): void {
  }


  closeDialog(): void {
    this.dialogRef.close();
  }

  onCancel() {
    this.dialogRef.close();
  }

  onConfirm() {
    if (this.modifySinistreForm.valid) {
      this.patchFinalValues();
      this.dialogRef.close(this.modifiedSinistre);
    }
  }

  patchInitialValues() {
    this.modifySinistreForm.controls.numeroPlaque.patchValue(this.data.element.numeroPlaque);
    this.modifySinistreForm.controls.dateSinistre.patchValue(this.data.element.dateSinistre);
    this.modifySinistreForm.controls.lieuSinistre.patchValue(this.data.element.lieuSinistre);
    this.modifySinistreForm.controls.causeSinistre.patchValue(this.data.element.causeSinistre);
    this.modifySinistreForm.controls.natureSinistre.patchValue(this.data.element.natureSinistre);
    this.modifySinistreForm.controls.numeroSinistre.patchValue(this.data.element.numeroSinistre);
    this.modifySinistreForm.controls.adresse.patchValue(this.data.element.adresseAssurance);
    this.modifySinistreForm.controls.assurance.patchValue(this.data.element.assurance);
    this.modifySinistreForm.controls.tier.patchValue(this.data.element.tier);
    this.modifySinistreForm.controls.circule.patchValue(this.data.element.circule);
    this.modifySinistreForm.controls.tiers.patchValue(this.data.element.tier);
    this.modifySinistreForm.controls.agePermis.patchValue(this.data.element.agePermis);
    this.modifySinistreForm.controls.dateNotification.patchValue(this.data.element.dateNotification);
    this.modifySinistreForm.controls.dateExpertise.patchValue(this.data.element.dateExpertise);
    this.modifySinistreForm.controls.dateReexpertise.patchValue(this.data.element.dateReexpertise);
    this.modifySinistreForm.controls.dateDebut.patchValue(this.data.element.dateDebut);
    this.modifySinistreForm.controls.dateFin.patchValue(this.data.element.dateFin);
    this.modifySinistreForm.controls.montantReparation.patchValue(this.data.element.montantReparation);
    this.modifySinistreForm.controls.montantIndemnite.patchValue(this.data.element.montantIndemnite);
    this.modifySinistreForm.controls.reference.patchValue(this.data.element.reference);
    this.modifySinistreForm.controls.observations.patchValue(this.data.element.observations);
    this.ReferentielGenerale.getAllDocumentSinistre(this.data.element.id).subscribe((documentSinistres) => {
      for (let documentSinistre of documentSinistres) {
        var tempDocument: DocumentSinistre = {
          id: documentSinistre.id,
          nomDocument: documentSinistre.nomDocument,
          adresseDocument: documentSinistre.adresseDocument,
          observations: documentSinistre.observations,
        };
        this.ListDocuments.push(tempDocument);
      }
      this.dataSource = new MatTableDataSource<DocumentSinistre>(this.ListDocuments);
    });
  }

  patchFinalValues() {
    this.modifiedSinistre = {
      id: this.data.element.id,
      idVehicule: this.data.element.idVehicule,
      dateSinistre: '',
      numeroSinistre: this.modifySinistreForm.value.numeroSinistre,
      lieuSinistre: this.modifySinistreForm.value.lieuSinistre,
      causeSinistre: this.modifySinistreForm.value.causeSinistre,
      natureSinistre: this.modifySinistreForm.value.natureSinistre,
      tier: this.modifySinistreForm.value.tiers,
      adresseAssurance: this.modifySinistreForm.value.adresse,
      assurance: this.modifySinistreForm.value.assurance,
      circule: this.modifySinistreForm.value.circule,
      agePermis: this.modifySinistreForm.value.agePermis,
      dateNotification: '',
      idExpert: null,
      dateExpertise: '',
      dateReexpertise: '',
      dateDebut: '',
      dateFin: '',
      montantReparation: this.modifySinistreForm.value.montantReparation,
      montantIndemnite: this.modifySinistreForm.value.montantIndemnite,
      observations: this.modifySinistreForm.value.observations,

    };
    if (this.modifySinistreForm.value.dateSinistre != null) {
      this.modifiedSinistre.dateSinistre = moment(this.modifySinistreForm.value.dateSinistre as Date).format('YYYY-MM-DD');
    }
    if (this.modifySinistreForm.value.dateNotification != null) {
      this.modifiedSinistre.dateNotification = moment(this.modifySinistreForm.value.dateNotification as Date).format('YYYY-MM-DD');
    }
    if (this.modifySinistreForm.value.dateExpertise != null) {
      this.modifiedSinistre.dateExpertise = moment(this.modifySinistreForm.value.dateExpertise as Date).format('YYYY-MM-DD');
    }
    if (this.modifySinistreForm.value.dateReexpertise != null) {
      this.modifiedSinistre.dateReexpertise = moment(this.modifySinistreForm.value.dateReexpertise as Date).format('YYYY-MM-DD');
    }
    if (this.modifySinistreForm.value.dateDebut != null) {
      this.modifiedSinistre.dateDebut = moment(this.modifySinistreForm.value.dateDebut as Date).format('YYYY-MM-DD');
    }
    if (this.modifySinistreForm.value.dateFin != null) {
      this.modifiedSinistre.dateFin = moment(this.modifySinistreForm.value.dateFin as Date).format('YYYY-MM-DD');
    }
    if (this.modifySinistreForm.value.expert != null) {
      this.modifiedSinistre.idExpert = this.modifySinistreForm.value.expert.id;
    }
    this.ReferentielGenerale.setSinistreDocumentCar(this.data.element.id, this.modifySinistreForm.value.observations);
  }

  onUploadNewDocument(event: any) {
    if (event.target.files && event.target.files[0]) {
      this.selectedNewFile = event.target.files[0];
      this.displayedText = this.selectedNewFile.name;
      //const reader = new FileReader();
      //this.url = event.target.files[0];
      //reader.readAsDataURL(event.target.files[0]); // read file as data url
      this.ReferentielGenerale.addDocument2BeUploaded(this.selectedNewFile);
      this.tempDocument = {
        nomDocument: this.selectedNewFile.name,
        adresseDocument: '...',
      };
      this.ListDocuments.push(this.tempDocument);
      this.dataSource = new MatTableDataSource<DocumentSinistre>(this.ListDocuments);
      //this.selectedNewFile = null;
    }
  }

  deleteDocumentRow(index: number) {
    var element: DocumentSinistre = this.ListDocuments[index];
    if (element.id) {
      this.ReferentielGenerale.addIdsDocument2BeDeleted(element.id);
    } else {
      this.ReferentielGenerale.deleteDocument2BeUploaded(index);
    }
    this.ListDocuments.splice(index, 1);
    this.dataSource = new MatTableDataSource<DocumentSinistre>(this.ListDocuments);
  }

  viewDocument(index: number) {
    var element: DocumentSinistre = this.ListDocuments[index];
    console.log(element);
  }
}

