import {Component, OnInit, ViewChild} from '@angular/core';
import {MatTableDataSource} from '@angular/material/table';
import {MatSort} from '@angular/material/sort';
import {PaginationConfiguration} from '../../pagination-configuration';
import {FormControl} from '@angular/forms';
import {ExploitationServiceService} from '../exploitation-service.service';
import {Router} from '@angular/router';
import {MatDialog} from '@angular/material/dialog';
import {MatSnackBar} from '@angular/material/snack-bar';
import {DeleteSinistreVehiculeComponent} from './delete-sinistre-vehicule/delete-sinistre-vehicule.component';
import {ModifySinistreVehiculeComponent} from './modify-sinistre-vehicule/modify-sinistre-vehicule.component';
import {NouveauSinistreVehiculeComponent} from './nouveau-sinistre-vehicule/nouveau-sinistre-vehicule.component';
import {NgxUiLoaderService} from 'ngx-ui-loader';
import {SinistreVehiculeTableData} from './sinistre-vehicule-table-data';
import {FicheVehiculeComponent} from '../../administratif/vehicules/fiche-vehicule/fiche-vehicule.component';
import { AuthenticationServiceService } from 'src/app/log-in/authentication-service.service';

@Component({
  selector: 'app-gestion-des-sinistres',
  templateUrl: './gestion-des-sinistres.component.html',
  styleUrls: ['./gestion-des-sinistres.component.scss'],
  providers: [MatSnackBar]
})
export class GestionDesSinistresComponent implements OnInit {

  Etat: string[] = ['En cours', 'Enregistré', 'Clôturé', 'Remboursé'];
  // @ts-ignore
  ListYears: string[] = ['2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030', '2031', '2032', '2033', '2034', '2035', '2036', '2037', '2038', '2039', '2040', '2041', '2042', '2043', '2044', '2045', '2046', '2047', '2048', '2049', '2050', '2051', '2052', '2053', '2054', '2055', '2056', '2057', '2058', '2059', '2060'];
  displayedColumns: string[] = ['index', 'numeroSerie', 'dateSinistre', 'natureSinistre', 'causeSinistre', 'nomBeneficiaire', 'vehicule', 'modifier', 'supprimer'];
  listSinistreVehicule: SinistreVehiculeTableData[] = [];
  dataSource = new MatTableDataSource<SinistreVehiculeTableData>(this.listSinistreVehicule);
  @ViewChild(MatSort) sort: MatSort;
  paginConfig: PaginationConfiguration = {
    id: 'custom',
    itemsPerPage: 10,
    currentPage: 0,
    totalItems: 10
  };
  itemPerPageForm = new FormControl(10);
  etatForm = new FormControl(null);
  yearsForm = new FormControl(null);
  ItemPerPage: any[] = [1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];
  snackBarFailureLoadingMsg = 'Problème de chargement, actualiser la page s\'il vous plait';
  snackBarSuccesAddingMsg = 'Le nouveau sinistre de véhicule a été ajouté avec succès';
  snackBarFailureAddingMsg = 'Le nouveau sinistre de véhicule ne pourra pas être ajouté, réessayez de nouveau s\'il vous plait';
  snackBarSuccesDeleteMsg = 'Le sinistre sélectionné a été supprimé avec succès';
  snackBarFailureDeleteMsg = 'Le sinistre ne pourra pas être supprimé, réessayez de nouveau s\'il vous plait';
  snackBarSuccesModificationMsg = 'Le sinistre sélectionné a été modifié avec succès';
  snackBarFailureModificationMsg = 'Le sinistre ne pourra pas être modifié, réessayez de nouveau s\'il vous plait';
  etat = 'tousEtats';
  annee = '1970';
  VIEW_SINISTRE:boolean;
  ADD_SINISTRE:boolean;
  MODIFY_SINISTRE:boolean;
  DELETE_SINISTRE:boolean;
  VIEW_VEHICULE_SINISTRE:boolean;

  constructor(  private Authentication: AuthenticationServiceService, private Exploitation: ExploitationServiceService, private router: Router, public dialog: MatDialog, private snackBar: MatSnackBar, private ngxLoader: NgxUiLoaderService) {
    this.ngxLoader.start();
    this.getTotalItems();
    this.setDisplayedColumns();
    this.ngxLoader.stop();
  }

  
  setDisplayedColumns() {
    this.VIEW_SINISTRE = this.Authentication.authoritiesUtilisateur.VIEW_SINISTRE;
    this.ADD_SINISTRE = this.Authentication.authoritiesUtilisateur.ADD_SINISTRE;
    this.MODIFY_SINISTRE = this.Authentication.authoritiesUtilisateur.MODIFY_SINISTRE;
    this.DELETE_SINISTRE = this.Authentication.authoritiesUtilisateur.DELETE_SINISTRE;
    this.VIEW_VEHICULE_SINISTRE = this.Authentication.authoritiesUtilisateur.VIEW_VEHICULE_SINISTRE;

  }
  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  ngOnInit(): void {
    this.itemPerPageForm.valueChanges.subscribe(value1 => {
      this.paginConfig.currentPage = 0;
      this.paginConfig.itemsPerPage = value1;
      this.getTotalItems();
    });
    this.etatForm.valueChanges.subscribe(value2 => {
      this.paginConfig.currentPage = 0;
      if (value2 === undefined) {
        this.etat = 'tousEtats';
      } else {
        this.etat = value2;
      }
      this.getTotalItems();
    });
    this.yearsForm.valueChanges.subscribe(value2 => {
      this.paginConfig.currentPage = 0;
      if (value2 === undefined) {
        this.annee = '1970';
      } else {
        this.annee = value2;
      }
      this.getTotalItems();
    });
  }

  deleteRow(index: number) {
    const dialogRef = this.dialog.open(DeleteSinistreVehiculeComponent, {
      width: '540px',
      panelClass: 'mat-dialog-container-class',
      data: {id: index}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.deleteSelectedSinistreVehicule(value3).subscribe(value2 => {
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesDeleteMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureDeleteMsg);
        });
      }
    });
  }

  displayPageContent(paginConfig: PaginationConfiguration) {
    this.Exploitation.getPaginationListSinistreVehicule(this.etat, this.annee, (this.paginConfig.currentPage - 1).toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.listSinistreVehicule = value;
      this.dataSource = new MatTableDataSource<SinistreVehiculeTableData>(this.listSinistreVehicule);
      this.dataSource.sort = this.sort;
    }, error => {
      setTimeout(() => {
        this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
      }, 800);
    });
  }

  numberToTable(inputNumber: number): number[] {
    const table: number[] = [];
    for (let i = 0; i < inputNumber; i++) {
      table.push(i);
    }
    return table;
  }

  redirect2Vehicule(idVehicule: any) {
    console.log(idVehicule);
    const dialogRef = this.dialog.open(FicheVehiculeComponent, {
      width: '1100px',
      panelClass: 'mat-dialog-container-class',
      data: {id: idVehicule}
    });
  }

  modifyRow(i: any) {
    const dialogRef = this.dialog.open(ModifySinistreVehiculeComponent, {
      width: '900px',
      panelClass: 'mat-dialog-container-class',
      data: {element: this.listSinistreVehicule[i]}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.modifySelectedSinistreVehicule(value3).subscribe(value2 => {
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesModificationMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureModificationMsg);
        });
      }
    });
  }

  ajouterNouveauSinistreVehicule() {
    const dialogRef = this.dialog.open(NouveauSinistreVehiculeComponent, {
      width: '900px',
      panelClass: 'mat-dialog-container-class',
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.addNewSinistreVehicule(value3).subscribe(value2 => {
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesAddingMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureLoadingMsg);
        });
      }
    });
  }

  getTotalItems() {
    this.Exploitation.getTotalNumberListSinistreVehicule(this.etat, this.annee).subscribe(value => {
      this.paginConfig.totalItems = value;
    }, error => {
      this.showNotification(this.snackBarFailureLoadingMsg);
    });
    this.Exploitation.getPaginationListSinistreVehicule(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.listSinistreVehicule = value;
      this.dataSource = new MatTableDataSource<SinistreVehiculeTableData>(this.listSinistreVehicule);
      this.dataSource.sort = this.sort;
    }, error => {
      this.showNotification(this.snackBarFailureLoadingMsg);
    });
  }

  showNotification(notification: string) {
    setTimeout(() => {
      this.snackBar.open(notification, 'X', {duration: 3000});
    }, 800);
  }
}
