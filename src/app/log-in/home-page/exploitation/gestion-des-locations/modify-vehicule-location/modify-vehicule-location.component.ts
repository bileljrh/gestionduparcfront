import {Component, Inject, OnInit} from '@angular/core';
import {FormControl, FormGroup, Validators} from '@angular/forms';
import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';
import {Energie} from '../../../referentiel/general/parametres-generaux/energie/energie';
import {Structure} from '../../../referentiel/specifique/structure-administrative/structure';
import {GenreVehicule} from '../../../referentiel/general/parametres-vehicules/genre-vehicule/genre-vehicule';
import {MarqueVehicule} from '../../../referentiel/general/parametres-vehicules/marque-vehicule/marque-vehicule';
import {AuthenticationServiceService} from '../../../../authentication-service.service';
import {ReferentielGeneraleServiceService} from '../../../referentiel/general/referentiel-generale-service.service';
import moment from 'moment';
import {NewLocationVehicule} from '../new-location-vehicule';
import { UGP } from '../../../referentiel/specifique/unite-gestion-parc/ugp';
import { StockServiceService } from '../../../stock/stock-service.service';
import { PaginationConfiguration } from '../../../pagination-configuration';

@Component({
  selector: 'app-modify-vehicule-location',
  templateUrl: './modify-vehicule-location.component.html',
  styleUrls: ['./modify-vehicule-location.component.scss']
})
export class ModifyVehiculeLocationComponent implements OnInit {
  paginConfig: PaginationConfiguration = {
    id: 'custom',
    itemsPerPage: 5,
    currentPage: 0,
    totalItems: 100
  };
  listUgp: UGP[] = [];
  ListEnergie: Energie[] = [];
  ListStructure: Structure[] = [];
  ListGenreVehicule: GenreVehicule[] = [];
  ListMarqueVehicule: MarqueVehicule[] = [];
  typeAffectation: string[] = ['Service', 'En panne', 'Sinistr√©'];
  modifiedLocationForm = new FormGroup({
    ugpControl : new FormControl(null),
    societeLocation: new FormControl(null, Validators.required),
    numeroImmatriculation: new FormControl(),
    numeroChassis: new FormControl(null, Validators.required),
    numeroPlaque: new FormControl(null, Validators.required),
    marche: new FormControl(),
    energie: new FormControl(null, Validators.required),
    designationUGPForm: new FormControl(null),
    genre: new FormControl(),
    marque: new FormControl(),
    indexKM: new FormControl(null, Validators.required),
    affectation: new FormControl(null, Validators.required),
    dateDebutLocation: new FormControl(null, Validators.required),
    dateFinLocation: new FormControl(),
    structure: new FormControl(null, Validators.required)
  });
  modifiedLocationVehicule: NewLocationVehicule = {
    id: null,
    idStructure: null,
    societeLocation: '',
    numeroImmatriculation: '',
    numeroChassis: '',
    numeroPlaque: '',
    marche: '',
    idEnergie: null,
    idGenre: null,
    idMarque: null,
    indexKM: 0,
    affectation: '',
    dateDebutLocation: '',
    dateFinLocation: '',
  };
  codeUGP = '';
  designationUGP = '';
  codeStructure = '';
  codeEnergie = '';
  codeMarque = '';
  code = '';

  constructor(private Stock:StockServiceService,public dialogRef: MatDialogRef<ModifyVehiculeLocationComponent>, @Inject(MAT_DIALOG_DATA) public data, private Authentication: AuthenticationServiceService, private Referentiel: ReferentielGeneraleServiceService) {
    console.log(data.element);
    this.ListStructure = this.Authentication.getUserStrucutures();
    this.Referentiel.getListEnergie().subscribe(value => {
      this.ListEnergie = value;
      this.ListEnergie.forEach(value1 => {
        if (value1.description === data.element.energie) {
          this.modifiedLocationForm.controls.energie.patchValue(value1);
        }
      });
    });
    this.Stock.getAllUgp().subscribe(value => {
      this.listUgp = value;
    });
    this.Referentiel.getListMarqueVehicule(this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.ListMarqueVehicule = value;
      this.ListMarqueVehicule.forEach(value1 => {
        if (value1.designation === data.element.marque) {
          this.modifiedLocationForm.controls.marque.patchValue(value1);
        }
      });
    });
    this.Referentiel.getListGenreVehicule(this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.ListGenreVehicule = value;
      this.ListGenreVehicule.forEach(value1 => {
        if (value1.designation === data.element.genre) {
          this.modifiedLocationForm.controls.genre.patchValue(value1);
        }
      });
    });
    this.patchInitialValues();
  }

  ngOnInit(): void {
    this.modifiedLocationForm.controls.structure.valueChanges.subscribe(value => {
      this.codeStructure = value.code;
      // this.codeUGP = value.ugp.code;
      // this.designationUGP = value.ugp.designation;
      this.Referentiel.onChangeUgp(this.modifiedLocationForm.value.structure.id).subscribe(value => {
        /* this.modifiedLocationForm.controls.designationUGPForm.patchValue(JSON.parse(value));
         this.codeUGP = JSON.parse(value);
         console.log('this.codeUGP');
         */
        console.log("tet ugp");
        
         console.log(value);
       });
      
    });
    this.modifiedLocationForm.controls.marque.valueChanges.subscribe(value => {
      this.codeMarque = value.code;
    });
    
  }

  closeDialog() {
    this.dialogRef.close();
  }

  onCancel() {
    this.dialogRef.close();
  }

  onConfirm() {
    if (this.modifiedLocationForm.valid) {
      this.patchFinalValues();
      this.dialogRef.close(this.modifiedLocationVehicule);
    }
  }
parc ='';
  UGP_Change(structure) {
    var UGP =  this.modifiedLocationForm.value.structure
    console.log(structure);

    this.Referentiel.onChangeUgp(structure.id).subscribe((value)=> {
     // this.modifiedLocationForm.value.designationUGPForm = value;
     

this.parc= value.designation;
      console.log(value);
      
      console.log(value.code);
      ;
              console.log(value);
     
      });
    
  }

  patchFinalValues() {
    this.modifiedLocationVehicule = {
      id: this.data.element.id,
      idStructure: this.modifiedLocationForm.value.structure.id,
      societeLocation: this.modifiedLocationForm.value.societeLocation,
      numeroImmatriculation: this.modifiedLocationForm.value.numeroImmatriculation,
      numeroChassis: this.modifiedLocationForm.value.numeroChassis,
      numeroPlaque: this.modifiedLocationForm.value.numeroPlaque,
      marche: this.modifiedLocationForm.value.marche,
      idEnergie: this.modifiedLocationForm.value.energie.id,
      idGenre: this.modifiedLocationForm.value.genre.id,
      idMarque: this.modifiedLocationForm.value.marque.id,
      indexKM: this.modifiedLocationForm.value.indexKM,
      affectation: this.modifiedLocationForm.value.affectation,
      dateDebutLocation: moment(this.modifiedLocationForm.value.dateDebutLocation as Date).format('YYYY-MM-DD'),
      dateFinLocation: moment(this.modifiedLocationForm.value.dateFinLocation as Date).format('YYYY-MM-DD'),
    };
  }

  patchInitialValues() {
    this.ListStructure.forEach(value => {
      if (value.code === this.data.element.codeStructure) {
        this.modifiedLocationForm.controls.structure.patchValue(value);
      }
    });
    this.modifiedLocationForm.controls.societeLocation.patchValue(this.data.element.societeLocation);
    this.modifiedLocationForm.controls.numeroImmatriculation.patchValue(this.data.element.numeroImmatriculation);
    this.modifiedLocationForm.controls.numeroChassis.patchValue(this.data.element.numeroChassis);
    this.modifiedLocationForm.controls.numeroPlaque.patchValue(this.data.element.numeroPlaque);
    this.modifiedLocationForm.controls.marche.patchValue(this.data.element.marche);
    this.modifiedLocationForm.controls.indexKM.patchValue(this.data.element.indexKM);
    this.modifiedLocationForm.controls.affectation.patchValue(this.data.element.affectation);
    this.modifiedLocationForm.controls.dateDebutLocation.patchValue(this.data.element.dateDebutLocation);
    this.modifiedLocationForm.controls.dateFinLocation.patchValue(this.data.element.dateFinLocation);
    this.modifiedLocationForm.controls.designationUGPForm.patchValue(this.codeUGP);
 
  }
}
