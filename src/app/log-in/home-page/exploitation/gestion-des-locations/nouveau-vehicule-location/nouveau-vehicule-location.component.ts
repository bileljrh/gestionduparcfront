import {Component, Inject, OnInit} from '@angular/core';
import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';
import {FormControl, FormGroup, Validators} from '@angular/forms';
import moment from 'moment';
import {Structure} from '../../../referentiel/specifique/structure-administrative/structure';
import {AuthenticationServiceService} from '../../../../authentication-service.service';
import {Energie} from '../../../referentiel/general/parametres-generaux/energie/energie';
import {ReferentielGeneraleServiceService} from '../../../referentiel/general/referentiel-generale-service.service';
import {GenreVehicule} from '../../../referentiel/general/parametres-vehicules/genre-vehicule/genre-vehicule';
import {MarqueVehicule} from '../../../referentiel/general/parametres-vehicules/marque-vehicule/marque-vehicule';
import {NewLocationVehicule} from '../new-location-vehicule';
import { UGP } from '../../../referentiel/specifique/unite-gestion-parc/ugp';
import { StockServiceService } from '../../../stock/stock-service.service';
import { PaginationConfiguration } from '../../../pagination-configuration';


@Component({
  selector: 'app-nouveau-vehicule-location',
  templateUrl: './nouveau-vehicule-location.component.html',
  styleUrls: ['./nouveau-vehicule-location.component.scss']
})
export class NouveauVehiculeLocationComponent implements OnInit {
  paginConfig: PaginationConfiguration = {
    id: 'custom',
    itemsPerPage: 5,
    currentPage: 0,
    totalItems: 100
  };
  listUgp: UGP[] = [];
  ListEnergie: Energie[] = [];
  ListStructure: Structure[] = [];
  ListGenreVehicule: GenreVehicule[] = [];
  ListMarqueVehicule: MarqueVehicule[] = [];
  typeAffectation: string[] = ['Service', 'En panne', 'Sinistr√©'];
  nouvelleLocationForm = new FormGroup({
    ugpControl : new FormControl(null),
    societeLocation: new FormControl(null, Validators.required),
    numeroImmatriculation: new FormControl(),
    numeroChassis: new FormControl(null, Validators.required),
    numeroPlaque: new FormControl(null, Validators.required),
    marche: new FormControl(),
    energie: new FormControl(null, Validators.required),
    genre: new FormControl(null, Validators.required),
    marque: new FormControl(null, Validators.required),
    indexKM: new FormControl(null, Validators.required),
    affectation: new FormControl(null, Validators.required),
    dateDebutLocation: new FormControl(null, Validators.required),
    dateFinLocation: new FormControl(null, Validators.required),
    structure: new FormControl(null, Validators.required)
  });
  get f() { return this.nouvelleLocationForm.controls; }

  newLocationVehicule: NewLocationVehicule = {
    idStructure: null,
    societeLocation: '',
    numeroImmatriculation: '',
    numeroChassis: '',
    numeroPlaque: '',
    marche: '',
    idEnergie: null,
    idGenre: null,
    idMarque: null,
    indexKM: 0,
    affectation: '',
    dateDebutLocation: '',
    dateFinLocation: '',
  };
  codeUGP = '';
  designationUGP = '';
  codeStructure = '';
  codeEnergie = '';
  codeMarque = '';
  code = '';

  constructor( private Stock:StockServiceService,public dialogRef: MatDialogRef<NouveauVehiculeLocationComponent>, @Inject(MAT_DIALOG_DATA) public data, private Authentication: AuthenticationServiceService, private Referentiel: ReferentielGeneraleServiceService) {
    this.ListStructure = this.Authentication.getUserStrucutures();
    this.Referentiel.getListEnergie().subscribe(value => {
      this.ListEnergie = value;
    });
    this.Stock.getAllUgp().subscribe(value => {
      this.listUgp = value;
    });
    this.Referentiel.getListMarqueVehicule(this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.ListMarqueVehicule = value;
    });
    this.Referentiel.getListGenreVehicule(this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.ListGenreVehicule = value;
    });
  }

  ngOnInit(): void {
    this.nouvelleLocationForm.controls.structure.valueChanges.subscribe(value => {
      this.codeStructure = value.code;
      // this.codeUGP = value.ugp.code;
      // this.designationUGP = value.ugp.designation;
    });
    this.nouvelleLocationForm.controls.marque.valueChanges.subscribe(value => {
      this.codeMarque = value.code;
    });
  }

  closeDialog() {
    this.dialogRef.close();
  }

  onCancel() {
    this.dialogRef.close();
  }

  onConfirm() {
    if (this.nouvelleLocationForm.valid) {
      this.newLocationVehicule = {
        idStructure: this.nouvelleLocationForm.value.structure.id,
        societeLocation: this.nouvelleLocationForm.value.societeLocation,
        numeroImmatriculation: this.nouvelleLocationForm.value.numeroImmatriculation,
        numeroChassis: this.nouvelleLocationForm.value.numeroChassis,
        numeroPlaque: this.nouvelleLocationForm.value.numeroPlaque,
        marche: this.nouvelleLocationForm.value.marche,
        idEnergie: this.nouvelleLocationForm.value.energie.id,
        idGenre: this.nouvelleLocationForm.value.genre.id,
        idMarque: this.nouvelleLocationForm.value.marque.id,
        indexKM: this.nouvelleLocationForm.value.indexKM,
        affectation: this.nouvelleLocationForm.value.affectation,
        dateDebutLocation: moment(this.nouvelleLocationForm.value.dateDebutLocation as Date).format('YYYY-MM-DD'),
        dateFinLocation: moment(this.nouvelleLocationForm.value.dateFinLocation as Date).format('YYYY-MM-DD'),
      };
      console.log(this.newLocationVehicule);
      this.dialogRef.close(this.newLocationVehicule);
    }
  }

}
