import {Component, OnInit, ViewChild} from '@angular/core';
import {MatSort} from '@angular/material/sort';
import {MatTableDataSource} from '@angular/material/table';
import {PaginationConfiguration} from '../../pagination-configuration';
import {FormControl} from '@angular/forms';
import {ExploitationServiceService} from '../exploitation-service.service';
import {MatDialog} from '@angular/material/dialog';
import {MatSnackBar} from '@angular/material/snack-bar';
import {NouveauVehiculeLocationComponent} from './nouveau-vehicule-location/nouveau-vehicule-location.component';
import {ModifyVehiculeLocationComponent} from './modify-vehicule-location/modify-vehicule-location.component';
import {DeleteVehiculeLocationComponent} from './delete-vehicule-location/delete-vehicule-location.component';
import moment from 'moment';
import {NgxUiLoaderService} from 'ngx-ui-loader';
import {LocationVehiculeTableData} from './location-vehicule-table-data';
import { AuthenticationServiceService } from 'src/app/log-in/authentication-service.service';


@Component({
  selector: 'app-gestion-des-locations',
  templateUrl: './gestion-des-locations.component.html',
  styleUrls: ['./gestion-des-locations.component.scss'],
  providers: [MatSnackBar]
})
export class GestionDesLocationsComponent implements OnInit {
  displayedColumns: string[] = ['index', 'structure', 'numeroSerie', 'marque', 'societeLocation', 'dateDebutLocation', 'dateFinLocation', 'modifier', 'supprimer'];
  listLocationVehicule: LocationVehiculeTableData[] = [];
  dataSource = new MatTableDataSource<LocationVehiculeTableData>(this.listLocationVehicule);
  @ViewChild(MatSort) sort: MatSort;
  paginConfig: PaginationConfiguration = {
    id: 'custom',
    itemsPerPage: 10,
    currentPage: 0,
    totalItems: 10
  };
  itemPerPageForm = new FormControl(10);
  dateMinForm = new FormControl(null);
  dateMaxForm = new FormControl(null);
  dateMin = '1970-01-01';
  dateMax = '1970-01-01';
  ItemPerPage: any[] = [1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];
  snackBarFailureLoadingMsg = 'Problème de chargement, actualiser la page s\'il vous plait';
  snackBarSuccesAddingMsg = 'La nouvelle location de véhicule a été ajoutée avec succès';
  snackBarFailureAddingMsg = 'La nouvelle location de véhicule ne pourra pas être ajoutée, réessayez de nouveau s\'il vous plait';
  snackBarSuccesDeleteMsg = 'La location de véhicule a été supprimée avec succès';
  snackBarFailureDeleteMsg = 'La location de véhicule ne pourra pas être supprimée, réessayez de nouveau s\'il vous plait';
  snackBarSuccesModificationMsg = 'La location de véhicule a été modifiée avec succès';
  snackBarFailureModificationMsg = 'La location de véhicule ne pourra pas être modifiée, réessayez de nouveau s\'il vous plait';
  min = '';
  max = '';
  VIEW_LOCATION : boolean;
  ADD_LOCATION : boolean;
  MODIFY_LOCATION : boolean;
  DELETE_LOCATION : boolean;
  constructor( private Authentication: AuthenticationServiceService, private Exploitation: ExploitationServiceService, public dialog: MatDialog, private snackBar: MatSnackBar, private ngxLoader: NgxUiLoaderService) {
    this.ngxLoader.start();
    this.getTotalItems();
    this.setDisplayedColumns();
    this.ngxLoader.stop();
  }

  setDisplayedColumns() {
    this.VIEW_LOCATION = this.Authentication.authoritiesUtilisateur.VIEW_LOCATION;
    this.ADD_LOCATION = this.Authentication.authoritiesUtilisateur.ADD_LOCATION;
    this.MODIFY_LOCATION = this.Authentication.authoritiesUtilisateur.MODIFY_LOCATION;
    this.DELETE_LOCATION = this.Authentication.authoritiesUtilisateur.DELETE_LOCATION;
    
  }
  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  ngOnInit(): void {
    this.dateMinForm.valueChanges.subscribe(value1 => {
      this.dateMin = moment(value1 as Date).format('YYYY-MM-DD');
      this.min = this.dateMin;
      this.paginConfig.currentPage = 0;
      this.getTotalItems();
    });
    this.dateMaxForm.valueChanges.subscribe(value1 => {
      this.dateMax = moment(value1 as Date).format('YYYY-MM-DD');
      this.max = this.dateMax;
      this.paginConfig.currentPage = 0;
      this.getTotalItems();
    });
    this.itemPerPageForm.valueChanges.subscribe(value1 => {
      this.paginConfig.itemsPerPage = value1;
      this.paginConfig.currentPage = 0;
      this.getTotalItems();
    });
  }

  ajouterNouvelleLocation() {
    const dialogRef = this.dialog.open(NouveauVehiculeLocationComponent, {
      width: '900px',
      panelClass: 'mat-dialog-container-class',
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.addNewLocationVehicule(value3).subscribe(value2 => {
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesAddingMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureAddingMsg);
        });
      }
    });
  }

  deleteRow(index: number) {
    const dialogRef = this.dialog.open(DeleteVehiculeLocationComponent, {
      width: '540px',
      panelClass: 'mat-dialog-container-class',
      data: {id: index}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.deleteSelectedLocationVehicule(value3).subscribe(value2 => {
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesDeleteMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureDeleteMsg);
        });
      }
    });
  }

  displayPageContent(paginConfig: PaginationConfiguration) {
    this.Exploitation.getPaginationLocationVehiculeList(this.dateMin, this.dateMax, (this.paginConfig.currentPage - 1).toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.listLocationVehicule = value;
      this.dataSource = new MatTableDataSource<LocationVehiculeTableData>(this.listLocationVehicule);
      this.dataSource.sort = this.sort;
    });
  }

  numberToTable(inputNumber: number): number[] {
    const table: number[] = [];
    for (let i = 0; i < inputNumber; i++) {
      table.push(i);
    }
    return table;
  }

  showNotification(notification: string) {
    setTimeout(() => {
      this.snackBar.open(notification, 'X', {duration: 3000});
    }, 800);
  }

  getTotalItems() {
    this.Exploitation.getTotalNumberLocationVehiculeList(this.dateMin, this.dateMax).subscribe(value => {
      this.paginConfig.totalItems = value;
    });
    this.Exploitation.getPaginationLocationVehiculeList(this.dateMin, this.dateMax, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.listLocationVehicule = value;
      this.dataSource = new MatTableDataSource<LocationVehiculeTableData>(this.listLocationVehicule);
      this.dataSource.sort = this.sort;
    }, error => {
      setTimeout(() => {
        this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
      }, 800);
    });
  }

  modifyRow(i: any) {
    const dialogRef = this.dialog.open(ModifyVehiculeLocationComponent, {
      width: '900px',
      panelClass: 'mat-dialog-container-class',
      data: {element: this.listLocationVehicule[i]}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.modifySelectedLocationVehicule(value3).subscribe(value2 => {
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureModificationMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesModificationMsg);
          this.getTotalItems();
        });
      }
    });
  }
}
