import {Component, OnInit, ViewChild} from '@angular/core';
import {MatSort} from '@angular/material/sort';
import {MatTableDataSource} from '@angular/material/table';
import {PaginationConfiguration} from '../../pagination-configuration';
import {FormControl} from '@angular/forms';
import {Router} from '@angular/router';
import {MatDialog} from '@angular/material/dialog';
import {MatSnackBar} from '@angular/material/snack-bar';
import {NouvelleDemandeReservationVehiculeComponent} from './nouvelle-demande-reservation-vehicule/nouvelle-demande-reservation-vehicule.component';
import {ExploitationServiceService} from '../exploitation-service.service';
import {DeleteDemandeReservationVehiculeComponent} from './delete-demande-reservation-vehicule/delete-demande-reservation-vehicule.component';
import {ConfirmDemandeReservationVehiculeComponent} from './confirm-demande-reservation-vehicule/confirm-demande-reservation-vehicule.component';
import {NgxUiLoaderService} from 'ngx-ui-loader';
import {ReservationVehiculeTableData} from './reservation-vehicule-table-data';
import {ModifyDemandeReservationComponent} from './modify-demande-reservation/modify-demande-reservation.component';
import {FicheVehiculeComponent} from '../../administratif/vehicules/fiche-vehicule/fiche-vehicule.component';
import { AuthenticationServiceService } from 'src/app/log-in/authentication-service.service';


@Component({
  selector: 'app-gestion-des-reservations',
  templateUrl: './gestion-des-reservations.component.html',
  styleUrls: ['./gestion-des-reservations.component.scss'],
  providers: [MatSnackBar]
})
export class GestionDesReservationsComponent implements OnInit {
  Status: string[] = ['En cours', 'Confirmée'];
  // @ts-ignore
  displayedColumns: string[] = ['index', 'structure', 'numero_plaque', 'dateDemande', 'dateConfirmation', 'dateDebutReservation', 'dateFinReservation', 'confirmer', 'vehicule', 'modifier', 'supprimer'];
  listReservationVehicule: ReservationVehiculeTableData[] = [];
  dataSource = new MatTableDataSource<ReservationVehiculeTableData>(this.listReservationVehicule);
  @ViewChild(MatSort) sort: MatSort;
  paginConfig: PaginationConfiguration = {
    id: 'custom',
    itemsPerPage: 10,
    currentPage: 0,
    totalItems: 10
  };
  itemPerPageForm = new FormControl(10);
  statusForm = new FormControl(null);
  ItemPerPage: any[] = [1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];
  snackBarFailureLoadingMsg = 'Problème de chargement, actualiser la page s\'il vous plait';
  snackBarSuccesAddingMsg = 'La nouvelle demande de réservation a été ajoutée avec succès';
  snackBarFailureAddingMsg = 'La nouvelle demande de réservation ne pourra pas être ajoutée, réessayez de nouveau s\'il vous plait';
  snackBarSuccesDeleteMsg = 'La réservation sélectionnée a été supprimée avec succès';
  snackBarFailureDeleteMsg = 'La réservation sélectionnée ne pourra pas être supprimée, réessayez de nouveau s\'il vous plait';
  snackBarSuccesModifyingMsg = 'La réservation sélectionnée a été modifiée avec succès';
  snackBarFailureModifyingMsg = 'La réservation sélectionnée ne pourra pas être modifiée, réessayez de nouveau s\'il vous plait';
  snackBarSuccesConfirmationMsg = 'La réservation sélectionnée a été confirmée avec succès';
  snackBarFailureConfirmationMsg = 'La réservation sélectionnée ne pourra pas être confirmée, réessayez de nouveau s\'il vous plait';
  status = 'allStatus';
  VIEW_RESERVATION: boolean;
  ADD_RESERVATION:boolean;
  MODIFY_RESERVATION:boolean;
  DELETE_RESERVATION:boolean;
  VIEW_VEHICULE_RESERVATION:boolean;
  CONFIRMER_RESERVATION:boolean;
  constructor(private Authentication: AuthenticationServiceService, private Exploitation: ExploitationServiceService, private router: Router, public dialog: MatDialog, private snackBar: MatSnackBar, private ngxLoader: NgxUiLoaderService) {
    this.ngxLoader.start();
    this.getTotalItems();
    this.setDisplayedColumns();
    this.ngxLoader.stop();
  }
  setDisplayedColumns() {
    this.VIEW_RESERVATION = this.Authentication.authoritiesUtilisateur.VIEW_RESERVATION;
    this.ADD_RESERVATION = this.Authentication.authoritiesUtilisateur.ADD_RESERVATION;
    this.MODIFY_RESERVATION = this.Authentication.authoritiesUtilisateur.MODIFY_RESERVATION;
    this.DELETE_RESERVATION = this.Authentication.authoritiesUtilisateur.DELETE_RESERVATION;
    this.VIEW_VEHICULE_RESERVATION = this.Authentication.authoritiesUtilisateur.VIEW_VEHICULE_RESERVATION;
    this.CONFIRMER_RESERVATION = this.Authentication.authoritiesUtilisateur.CONFIRMER_RESERVATION;
console.log(this.VIEW_RESERVATION);
console.log( this.CONFIRMER_RESERVATION );
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  ngOnInit(): void {
    this.itemPerPageForm.valueChanges.subscribe(value => {
      this.paginConfig.currentPage = 0;
      this.paginConfig.itemsPerPage = value;
      this.getTotalItems();
    });
    this.statusForm.valueChanges.subscribe(value2 => {
      this.paginConfig.currentPage = 0;
      if (value2 === undefined) {
        this.status = 'allStatus';
      } else {
        this.status = value2;
      }
      this.getTotalItems();
    });
  }

  ajouterNouvelleDemandeReservation() {
    const dialogRef = this.dialog.open(NouvelleDemandeReservationVehiculeComponent, {
      disableClose: true,
      width: '900px',
      panelClass: 'mat-dialog-container-class',
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.addNewDemandeReservationVehicule(value3).subscribe(value => {
          this.paginConfig.currentPage = 0;
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesAddingMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesAddingMsg);
          this.getTotalItems();
        });
      }
    });
  }

  deleteRow(index: number) {
    const dialogRef = this.dialog.open(DeleteDemandeReservationVehiculeComponent, {
      width: '540px',
      panelClass: 'mat-dialog-container-class',
      data: {id: index}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.deleteSelectedReservationVehicule(value3).subscribe(value => {
          this.paginConfig.currentPage = 0;
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesDeleteMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureDeleteMsg);
        });
      }
    });
  }

  modifyRow(i: number) {
    const dialogRef = this.dialog.open(ModifyDemandeReservationComponent, {
      disableClose: true,
      width: '900px',
      panelClass: 'mat-dialog-container-class',
      data: {element: this.listReservationVehicule[i]}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.modifySelectedDemandeReservationVehicule(value3).subscribe(value => {
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesModifyingMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureModifyingMsg);
        });
        this.ngxLoader.stop();
      }
    });
  }

  displayPageContent(paginConfig: PaginationConfiguration) {
    this.Exploitation.getPaginationListReservationVehiculeBySelectedStatus(this.status, (this.paginConfig.currentPage - 1).toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value1 => {
      this.listReservationVehicule = value1;
      this.dataSource = new MatTableDataSource<ReservationVehiculeTableData>(this.listReservationVehicule);
      this.dataSource.sort = this.sort;
    }, error => {
      setTimeout(() => {
        this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
      }, 800);
    });
  }

  numberToTable(inputNumber: number): number[] {
    const table: number[] = [];
    for (let i = 0; i < inputNumber; i++) {
      table.push(i);
    }
    return table;
  }

  redirect2Vehicule(idVehicule: any) {
    const dialogRef = this.dialog.open(FicheVehiculeComponent, {
      width: '1100px',
      panelClass: 'mat-dialog-container-class',
      data: {id: idVehicule}
    });
  }

  confirmRow(index: any) {
    const dialogRef = this.dialog.open(ConfirmDemandeReservationVehiculeComponent, {
      width: '540px',
      panelClass: 'mat-dialog-container-class',
      data: {id: index}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.confirmSelectedReservationVehicule(value3).subscribe(value => {
          this.paginConfig.currentPage = 0;
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesConfirmationMsg);
        }, error => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureConfirmationMsg);
        });
      }
    });
  }

  getTotalItems() {
    this.Exploitation.getTotalNumberListReservationVehiculeBySelectedStatus(this.status, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.paginConfig.totalItems = value;
    });
    this.Exploitation.getPaginationListReservationVehiculeBySelectedStatus(this.status, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      console.log(value);
      this.listReservationVehicule = value;
      this.dataSource = new MatTableDataSource<ReservationVehiculeTableData>(this.listReservationVehicule);
      this.dataSource.sort = this.sort;
    }, error => {
      this.showNotification(this.snackBarFailureLoadingMsg);
    });
  }

  showNotification(notification: string) {
    setTimeout(() => {
      this.snackBar.open(notification, 'X', {duration: 3000});
    }, 800);
  }

}


