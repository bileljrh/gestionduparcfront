import {Component, Inject} from '@angular/core';
import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';
import {ExploitationServiceService} from '../../exploitation-service.service';
import {MatSnackBar} from '@angular/material/snack-bar';
import {FormControl, FormGroup, Validators} from '@angular/forms';
import moment from 'moment';
import {SelectVehicule} from '../../../administratif/vehicules/select-vehicule';
import {NgxUiLoaderService} from 'ngx-ui-loader';
import {ReservationVehiculeTableData} from '../reservation-vehicule-table-data';

@Component({
  selector: 'app-nouvelle-demande-reservation-vehicule',
  templateUrl: './nouvelle-demande-reservation-vehicule.component.html',
  styleUrls: ['./nouvelle-demande-reservation-vehicule.component.scss'],
  providers: [MatSnackBar]
})
export class NouvelleDemandeReservationVehiculeComponent {
  nouvelleReservation: ReservationVehiculeTableData = {
    idVehicule: null,
    dateDebutReservation: '',
    dateFinReservation: '',
    objet: ''
  };
  ListVehicules: SelectVehicule[] = [];
  nouvelleReservationForm = new FormGroup({
    numeroPlaque: new FormControl(null, Validators.required),
    dateDebut: new FormControl(null, Validators.required),
    dateFin: new FormControl(null, Validators.required),
    objet: new FormControl(null),
  });

  get f() { return this.nouvelleReservationForm.controls; }

  snackBarFailureLoadingMsg = 'Probl√®me de chargement, actualiser la page s\'il vous plait';
  designationStructure = '';
  codeStructure = '';

  constructor(public dialogRef: MatDialogRef<NouvelleDemandeReservationVehiculeComponent>, @Inject(MAT_DIALOG_DATA) public data, private Exploitation: ExploitationServiceService, private snackBar: MatSnackBar, private ngxLoader: NgxUiLoaderService) {
    this.ngxLoader.start();
    this.Exploitation.getSelectVehiculeByStrucutureForReservation().subscribe(value => {
      this.ListVehicules = value;
    }, error => {
      this.showNotification(this.snackBarFailureLoadingMsg);
    });
    this.nouvelleReservationForm.controls.numeroPlaque.valueChanges.subscribe(value => {
      this.designationStructure = value.designationStructure;
      this.codeStructure = value.codeStructure;
    });
    this.ngxLoader.stop();
  }

  closeDialog() {
    this.dialogRef.close();
  }

  onCancel() {
    this.dialogRef.close();
  }

  onConfirm() {
    if (this.nouvelleReservationForm.valid) {
      this.nouvelleReservation = {
        idVehicule: this.nouvelleReservationForm.value.numeroPlaque.id,
        dateDebutReservation: moment(this.nouvelleReservationForm.value.dateDebutReservation as Date).format('YYYY-MM-DD'),
        dateFinReservation: moment(this.nouvelleReservationForm.value.dateFinReservation as Date).format('YYYY-MM-DD'),
        objet: this.nouvelleReservationForm.value.objet
      };
      this.dialogRef.close(this.nouvelleReservation);
    }
  }

  showNotification(notification: string) {
    setTimeout(() => {
      this.snackBar.open(notification, 'X', {duration: 3000});
    }, 800);
  }

}
