import {Injectable} from '@angular/core';
import {HttpClient, HttpParams} from '@angular/common/http';
import {Observable} from 'rxjs';
import {SinistreVehicule} from './gestion-des-sinistres/sinistre-vehicule';
import {EmpruntVehicule} from './gestion-des-emprunts/emprunt-vehicule';
import {environment} from '../../../../environments/environment.prod';
import {SelectVehicule} from '../administratif/vehicules/select-vehicule';
import {ReservationVehiculeTableData} from './gestion-des-reservations/reservation-vehicule-table-data';
import {NewLocationVehicule} from './gestion-des-locations/new-location-vehicule';
import {LocationVehiculeTableData} from './gestion-des-locations/location-vehicule-table-data';
import {ListBeneficiaireStrucuture} from './gestion-des-emprunts/list-beneficiaire-strucuture';
import {SinistreVehiculeTableData} from './gestion-des-sinistres/sinistre-vehicule-table-data';
import {NewEmpruntVehicule} from './gestion-des-emprunts/new-emprunt-vehicule';

@Injectable({
  providedIn: 'root'
})
export class ExploitationServiceService {
  serverURL = environment.serverUrl;

  constructor(private  http: HttpClient) {
  }


  getSelectVehiculeByStrucutureForReservation(): Observable<SelectVehicule[]> {
    return this.http.get<SelectVehicule[]>(this.serverURL + '/select_vehicule_reservation');
  }

  addNewDemandeReservationVehicule(reservation: ReservationVehiculeTableData): Observable<any> {
    return this.http.post<any>(this.serverURL + '/demande_reservation_vehicule', reservation);
  }

  modifySelectedDemandeReservationVehicule(reservation: ReservationVehiculeTableData): Observable<any> {
    return this.http.put<any>(this.serverURL + '/demande_reservation_vehicule', reservation);
  }

  getPaginationListReservationVehiculeBySelectedStatus(status: string, page: string, limit: string): Observable<ReservationVehiculeTableData[]> {
    const params = new HttpParams().set('status', status).set('page', page).set('limit', limit);
    return this.http.get<ReservationVehiculeTableData[]>(this.serverURL + '/list_reservation_vehicule', {params});
  }

  getTotalNumberListReservationVehiculeBySelectedStatus(status: string, page: string, limit: string): Observable<number> {
    const params = new HttpParams().set('status', status).set('page', page).set('limit', limit);
    return this.http.get<number>(this.serverURL + '/total_number_reservation_vehicule', {params});
  }

  deleteSelectedReservationVehicule(id: number): Observable<any> {
    return this.http.delete<any>(this.serverURL + '/reservation_vehicule/' + id);
  }

  confirmSelectedReservationVehicule(id: number): Observable<any> {
    return this.http.put<any>(this.serverURL + '/reservation_vehicule', id);
  }

  addNewLocationVehicule(locationVehicule: NewLocationVehicule): Observable<any> {
    return this.http.post<any>(this.serverURL + '/location_vehicule', locationVehicule);
  }


  modifySelectedLocationVehicule(locationVehicule: NewLocationVehicule): Observable<any> {
    return this.http.put<any>(this.serverURL + '/location_vehicule', locationVehicule);
  }

  deleteSelectedLocationVehicule(id: number): Observable<any> {
    return this.http.delete<any>(this.serverURL + '/location_vehicule/' + id);
  }

  getPaginationLocationVehiculeList(firstDate: string, secondDate: string, page: string, limit: string): Observable<LocationVehiculeTableData[]> {
    const params = new HttpParams().set('dateMin', firstDate).set('dateMax', secondDate).set('page', page).set('limit', limit);
    return this.http.get<LocationVehiculeTableData[]>(this.serverURL + '/pagination_location_vehicule', {params});
  }

  getTotalNumberLocationVehiculeList(firstDate: string, secondDate: string): Observable<number> {
    const params = new HttpParams().set('dateMin', firstDate).set('dateMax', secondDate);
    return this.http.get<number>(this.serverURL + '/total_number_location_vehicule', {params});
  }

  getSelectVehiculeByStrucutureForSinistre(): Observable<SelectVehicule[]> {
    return this.http.get<SelectVehicule[]>(this.serverURL + '/select_vehicule_sinistre');
  }

  addNewSinistreVehicule(sinistre: SinistreVehicule): Observable<any> {
    return this.http.post<any>(this.serverURL + '/sinistre_vehicule', sinistre);
  }

  deleteSelectedSinistreVehicule(id: number): Observable<any> {
    return this.http.delete<any>(this.serverURL + '/sinistre_vehicule/' + id);
  }

  getPaginationListSinistreVehicule(firstSelect: string, secondSelect: string, page: string, limit: string): Observable<SinistreVehiculeTableData[]> {
    const params = new HttpParams().set('etat', firstSelect).set('annee', secondSelect).set('page', page).set('limit', limit);
    return this.http.get<SinistreVehiculeTableData[]>(this.serverURL + '/pagination_sinistre_vehicule', {params});
  }

  getTotalNumberListSinistreVehicule(firstSelect: string, secondSelect: string): Observable<number> {
    const params = new HttpParams().set('etat', firstSelect).set('annee', secondSelect);
    return this.http.get<number>(this.serverURL + '/total_number_sinistre_vehicule', {params});
  }

  modifySelectedSinistreVehicule(sinistreVehicule: SinistreVehicule): Observable<any> {
    return this.http.put<any>(this.serverURL + '/sinistre_vehicule', sinistreVehicule);
  }

  deleteSelectedDocumentSinistreVehicule(id: number): Observable<any> {
    return this.http.delete<any>(this.serverURL + '/document_sinistre_vehicule/' + id);
  }

  uploadNewDocumentSinistreVehicule(observation: string, document: FormData, id: number): Observable<any> {
    return this.http.post<any>(this.serverURL + '/document_sinistre_vehicule/' + id + '/' + observation, document);
  }

  getSelectVehiculeByStrucutureForEmprunt(): Observable<SelectVehicule[]> {
    return this.http.get<SelectVehicule[]>(this.serverURL + '/select_vehicule_emprunt');
  }

  addNewEmpruntVehicule(empruntVehicule: EmpruntVehicule): Observable<any> {
    return this.http.post<any>(this.serverURL + '/emprunt_vehicule', empruntVehicule);
  }

  getPaginationListEmpruntVehiculeBySelectedStatusAndYear(firstSelect: string, secondSelect: string, page: string, limit: string): Observable<EmpruntVehicule[]> {
    const params = new HttpParams().set('etat', firstSelect).set('annee', secondSelect).set('page', page).set('limit', limit);
    return this.http.get<EmpruntVehicule[]>(this.serverURL + '/pagination_emprunt_vehicule', {params});
  }

  getTotalItemListEmpruntVehiculeBySelectedStatusAndYear(firstSelect: string, secondSelect: string, page: string, limit: string): Observable<number> {
    const params = new HttpParams().set('etat', firstSelect).set('annee', secondSelect).set('page', page).set('limit', limit);
    return this.http.get<number>(this.serverURL + '/total_item_emprunt_vehicule', {params});
  }

  confirmSelectedEmpruntVehicule(id: number): Observable<any> {
    return this.http.post<number>(this.serverURL + '/confirm_emprunt_vehicule', id);
  }

  modifySelectedEmpruntVehicule(newEmpruntVehicule: NewEmpruntVehicule): Observable<any> {
    return this.http.put<number>(this.serverURL + '/emprunt_vehicule', newEmpruntVehicule);
  }


  deleteSelectedEmpruntVehicule(id: number): Observable<any> {
    return this.http.delete<number>(this.serverURL + '/emprunt_vehicule/' + id);
  }

  getListBeneficiaireStructureResponse(): Observable<ListBeneficiaireStrucuture[]> {
    return this.http.get<ListBeneficiaireStrucuture[]>(this.serverURL + '/select_beneficiaire_strucuture');
  }
}
