import {Component, Inject, OnInit} from '@angular/core';
import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';
import {FormControl, FormGroup, Validators} from '@angular/forms';
import {ExploitationServiceService} from '../../exploitation-service.service';
import moment from 'moment';
import {SelectVehicule} from '../../../administratif/vehicules/select-vehicule';
import {Structure} from '../../../referentiel/specifique/structure-administrative/structure';
import {AuthenticationServiceService} from '../../../../authentication-service.service';
import {ListBeneficiaireStrucuture} from '../list-beneficiaire-strucuture';
import {NewEmpruntVehicule} from '../new-emprunt-vehicule';

export interface BeneficiaireEmprunt {
  idBeneficiaire: number;
  matriculeBeneficiaire: string;
  nomBeneficiaire: string;
}

@Component({
  selector: 'app-nouveau-emprunt-vehicule',
  templateUrl: './nouveau-emprunt-vehicule.component.html',
  styleUrls: ['./nouveau-emprunt-vehicule.component.scss']
})
export class NouveauEmpruntVehiculeComponent implements OnInit {
  snackBarFailureLoadingMsg = 'Probl√®me de chargement, actualiser la page s\'il vous plait';
  ListStructure: Structure[] = [];
  ListVehiculeEmprunt: SelectVehicule[] = [];
  nouvelleEmpruntForm = new FormGroup({
    numeroPlaque: new FormControl(null,Validators.required),
    beneficiaireEmprunt: new FormControl(null,Validators.required),
    dateEmprunt: new FormControl(null,Validators.required),
    dateRetourPrevu: new FormControl(null,Validators.required),
    structure :new FormControl(null,Validators.required),
    dateRetourEffective: new FormControl(null,Validators.required),
  });
  get f() { return this.nouvelleEmpruntForm.controls; }

  Structure: any;
  listBeneficiaireEmprunt: ListBeneficiaireStrucuture[] = [];
  listStructureEmprunt: string [] = [];
  nomBeneficiaire = '';
  matriculeBeneficiaire = '';
  nomBeneficiaireEmprunt = '';
  matriculeBeneficiaireEmprunt = '';
  codeStructureEmprunt = '';
  designationStructureEmprunt = '';
  nouvelleEmprunt: NewEmpruntVehicule = {
    idVehicule: null,
    idBeneficiaireEmprunt: null,
    dateEmprunt: '',
    confirmed: false,
    dateRetourPrevu: '',
    dateRetourEffective: '',
  };

  constructor(private Exploitation: ExploitationServiceService, public dialogRef: MatDialogRef<NouveauEmpruntVehiculeComponent>, @Inject(MAT_DIALOG_DATA) public data, private Authentication: AuthenticationServiceService) {
    this.Exploitation.getSelectVehiculeByStrucutureForEmprunt().subscribe(value => {
      this.ListVehiculeEmprunt = value;
    });
    this.Exploitation.getListBeneficiaireStructureResponse().subscribe(value => {
      this.listBeneficiaireEmprunt = value;
    });
    this.ListStructure = this.Authentication.getUserStrucutures();
  }

  ngOnInit(): void {
    this.nouvelleEmpruntForm.controls.beneficiaireEmprunt.valueChanges.subscribe(value => {
      this.matriculeBeneficiaireEmprunt = value.beneficiaireEmprunt;
      if (value.codeStrucuture !== null) {
        this.codeStructureEmprunt = value.codeStrucuture;
      } else {
        this.codeStructureEmprunt = '';
      }
      if (value.designationStrucuture !== null) {
        this.designationStructureEmprunt = value.designationStrucuture;
      } else {
        this.designationStructureEmprunt = '';
      }
    });
    this.nouvelleEmpruntForm.controls.numeroPlaque.valueChanges.subscribe(value => {
      this.nomBeneficiaire = value.nomBeneficiaire;
      this.matriculeBeneficiaire = value.matriculeBeneficiaire;
    });
  }

  closeDialog() {
    this.dialogRef.close();
  }

  onCancel() {
    this.dialogRef.close();
  }

  onConfirm() {
    if (this.nouvelleEmpruntForm.valid) {
      this.patchFinalValues();
      this.dialogRef.close(this.nouvelleEmprunt);
    }
  }

  patchFinalValues() {
    this.nouvelleEmprunt = {
      idVehicule: this.nouvelleEmpruntForm.value.numeroPlaque.id,
      idBeneficiaireEmprunt: this.nouvelleEmpruntForm.value.beneficiaireEmprunt.idBeneficiaire,
      dateEmprunt: moment(this.nouvelleEmpruntForm.value.dateEmprunt as Date).format('YYYY-MM-DD'),
      confirmed: false,
      dateRetourPrevu: null,
      dateRetourEffective: null,
    };
    if (this.nouvelleEmpruntForm.value.dateRetourPrevu != null) {
      this.nouvelleEmprunt.dateRetourPrevu = moment(this.nouvelleEmpruntForm.value.dateRetourPrevu as Date).format('YYYY-MM-DD');
    }
    if (this.nouvelleEmpruntForm.value.dateRetourEffective != null) {
      this.nouvelleEmprunt.dateRetourEffective = moment(this.nouvelleEmpruntForm.value.dateRetourEffective as Date).format('YYYY-MM-DD');
    }
  }
}
