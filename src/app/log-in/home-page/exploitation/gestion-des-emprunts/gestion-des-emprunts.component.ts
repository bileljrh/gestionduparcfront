import {Component, OnInit, ViewChild} from '@angular/core';
import {MatTableDataSource} from '@angular/material/table';
import {MatSort} from '@angular/material/sort';
import {PaginationConfiguration} from '../../pagination-configuration';
import {FormControl} from '@angular/forms';
import {ExploitationServiceService} from '../exploitation-service.service';
import {MatDialog} from '@angular/material/dialog';
import {MatSnackBar} from '@angular/material/snack-bar';
import {DeleteVehiculeLocationComponent} from '../gestion-des-locations/delete-vehicule-location/delete-vehicule-location.component';
import {NouveauEmpruntVehiculeComponent} from './nouveau-emprunt-vehicule/nouveau-emprunt-vehicule.component';
import {EmpruntVehicule} from './emprunt-vehicule';
import {ConfirmEmpruntVehiculeComponent} from './confirm-emprunt-vehicule/confirm-emprunt-vehicule.component';
import {NgxUiLoaderService} from 'ngx-ui-loader';
import {ModifyEmpruntVehiculeComponent} from './modify-emprunt-vehicule/modify-emprunt-vehicule.component';
import { AuthenticationServiceService } from 'src/app/log-in/authentication-service.service';


export interface EtatEmprunt {
  stringValue: string;
  booleanValue: boolean;
}

@Component({
  selector: 'app-gestion-des-emprunts',
  templateUrl: './gestion-des-emprunts.component.html',
  styleUrls: ['./gestion-des-emprunts.component.scss'],
  providers: [MatSnackBar]
})
export class GestionDesEmpruntsComponent implements OnInit {
  displayedColumns: string[] = ['index', 'numeroSerie', 'dateEmprunt', 'nomBeneficiaire', 'dateRetourPrevu', 'dateRetourEffective', 'confirmer', 'vehicule', 'modifier', 'supprimer'];
  listEmpruntVehicule: EmpruntVehicule[] = [];
  dataSource = new MatTableDataSource<EmpruntVehicule>(this.listEmpruntVehicule);
  @ViewChild(MatSort) sort: MatSort;
  paginConfig: PaginationConfiguration = {
    id: 'custom',
    itemsPerPage: 10,
    currentPage: 0,
    totalItems: 10
  };
  itemPerPageForm = new FormControl(10);
  AnneeForm = new FormControl(null);
  EtatForm = new FormControl(null);
  ItemPerPage: any[] = [1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000];
  snackBarFailureLoadingMsg = 'Problème de chargement, actualiser la page s\'il vous plait';
  snackBarSuccesAddingMsg = 'Le nouveau emprunt de véhicule a été ajouté avec succès';
  snackBarFailureAddingMsg = 'Le nouveau emprunt de véhicule ne pourra pas être ajouté, réessayez de nouveau s\'il vous plait';
  snackBarSuccesDeleteMsg = 'L\'emprunt de véhicule a été supprimé avec succès';
  snackBarFailureDeleteMsg = 'L\'emprunt de véhicule ne pourra pas être supprimé, réessayez de nouveau s\'il vous plait';
  snackBarSuccesModificationMsg = 'L\'emprunt de véhicule a été modifié avec succès';
  snackBarFailureModificationMsg = 'L\'emprunt de véhicule ne pourra pas être modifié, réessayez de nouveau s\'il vous plait';
  snackBarSuccesConfirmationMsg = 'L\'emprunt de véhicule a été confirmé avec succès';
  snackBarFailureConfirmationMsg = 'L\'emprunt de véhicule ne pourra pas être confirmé, réessayez de nouveau s\'il vous plait';
  Annee: string[] = ['2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030', '2031', '2032', '2033', '2034', '2035', '2036', '2037', '2038', '2039', '2040', '2041', '2042', '2043', '2044', '2045', '2046', '2047', '2048', '2049', '2050', '2051', '2052', '2053', '2054', '2055', '2056', '2057', '2058', '2059', '2060'];
  Etat: EtatEmprunt [] = [{stringValue: 'En cours', booleanValue: false}, {stringValue: 'Confirmé', booleanValue: true}];
  etat = 'tousEtats';
  annee = 'tousAnnee';
  VIEW_EMPRUNT:boolean;
  ADD_EMPRUNT:boolean;
  MODIFY_EMPRUNT:boolean;
  DELETE_EMPRUNT:boolean;
  VIEW_VEHICULE_EMPRUNT:boolean;
  CONFIRMER_EMPRUNT:boolean;
  constructor(private Authentication: AuthenticationServiceService,  private Exploitation: ExploitationServiceService, public dialog: MatDialog, private snackBar: MatSnackBar, private ngxLoader: NgxUiLoaderService) {
    this.ngxLoader.start();
    this.getTotalItems();
    this.setDisplayedColumns();
    this.ngxLoader.stop();
  }

  
  setDisplayedColumns() {
    this.VIEW_EMPRUNT = this.Authentication.authoritiesUtilisateur.VIEW_EMPRUNT;
    this.ADD_EMPRUNT = this.Authentication.authoritiesUtilisateur.ADD_EMPRUNT;
    this.MODIFY_EMPRUNT = this.Authentication.authoritiesUtilisateur.MODIFY_EMPRUNT;
    this.DELETE_EMPRUNT = this.Authentication.authoritiesUtilisateur.DELETE_EMPRUNT;
    this.VIEW_VEHICULE_EMPRUNT = this.Authentication.authoritiesUtilisateur.VIEW_VEHICULE_EMPRUNT;
    this.CONFIRMER_EMPRUNT = this.Authentication.authoritiesUtilisateur.CONFIRMER_EMPRUNT;

  }
  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  ngOnInit(): void {
    this.itemPerPageForm.valueChanges.subscribe(value1 => {
      this.paginConfig.itemsPerPage = value1;
      this.paginConfig.currentPage = 0;
      this.Exploitation.getPaginationListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
        this.listEmpruntVehicule = value;
        this.dataSource = new MatTableDataSource<EmpruntVehicule>(this.listEmpruntVehicule);
        this.dataSource.sort = this.sort;
      }, error => {
        setTimeout(() => {
          this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
        }, 800);
      });
    });
    this.EtatForm.valueChanges.subscribe(value2 => {
      if (value2 === undefined) {
        this.etat = 'tousEtats';
      } else {
        this.etat = value2;
      }
      this.paginConfig.currentPage = 0;
      this.Exploitation.getTotalItemListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
        this.paginConfig.totalItems = value;
      });
      this.Exploitation.getPaginationListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
        this.listEmpruntVehicule = value;
        this.dataSource = new MatTableDataSource<EmpruntVehicule>(this.listEmpruntVehicule);
        this.dataSource.sort = this.sort;
      }, error => {
        setTimeout(() => {
          this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
        }, 800);
      });
    });
    this.AnneeForm.valueChanges.subscribe(value2 => {
      if (value2 === undefined) {
        this.annee = 'tousAnnee';
      } else {
        this.annee = value2;
      }
      this.paginConfig.currentPage = 0;
      this.Exploitation.getTotalItemListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
        this.paginConfig.totalItems = value;
      });
      this.Exploitation.getPaginationListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
        this.listEmpruntVehicule = value;
        this.dataSource = new MatTableDataSource<EmpruntVehicule>(this.listEmpruntVehicule);
        this.dataSource.sort = this.sort;
      }, error => {
        setTimeout(() => {
          this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
        }, 800);
      });
    });
  }

  ajouterNouvelleLocation() {
    const dialogRef = this.dialog.open(NouveauEmpruntVehiculeComponent, {
      width: '900px',
      panelClass: 'mat-dialog-container-class',
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.Exploitation.addNewEmpruntVehicule(value3).subscribe(value2 => {
          this.paginConfig.currentPage = 0;
          this.Exploitation.getTotalItemListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
            this.paginConfig.totalItems = value;
          });
          this.Exploitation.getPaginationListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
            this.listEmpruntVehicule = value;
            this.dataSource = new MatTableDataSource<EmpruntVehicule>(this.listEmpruntVehicule);
            this.dataSource.sort = this.sort;
          }, error => {
            setTimeout(() => {
              this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
            }, 800);
          });
          setTimeout(() => {
            this.snackBar.open(this.snackBarFailureAddingMsg, 'X', {duration: 3000});
          }, 800);
        }, error2 => {
          setTimeout(() => {
            this.snackBar.open(this.snackBarSuccesAddingMsg, 'X', {duration: 3000});


          }, 800);
          this.getTotalItems();
        });
      }
    });
  }

  deleteRow(index: number) {
    const dialogRef = this.dialog.open(DeleteVehiculeLocationComponent, {
      width: '540px',
      panelClass: 'mat-dialog-container-class',
      data: {id: index}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.deleteSelectedEmpruntVehicule(value3).subscribe(value2 => {
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesDeleteMsg);
        }, error2 => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureDeleteMsg);
        });
      }
    });
  }

  displayPageContent(paginConfig: PaginationConfiguration) {
    this.Exploitation.getPaginationListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, (this.paginConfig.currentPage - 1).toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.listEmpruntVehicule = value;
      this.dataSource = new MatTableDataSource<EmpruntVehicule>(this.listEmpruntVehicule);
      this.dataSource.sort = this.sort;
    }, error => {
      setTimeout(() => {
        this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
      }, 800);
    });
  }

  numberToTable(inputNumber: number): number[] {
    const table: number[] = [];
    for (let i = 0; i < inputNumber; i++) {
      table.push(i);
    }
    return table;
  }

  redirect2Vehicule(idVehicule: any) {
  }

  modifyRow(index: any) {
    const dialogRef = this.dialog.open(ModifyEmpruntVehiculeComponent, {
      width: '900px',
      panelClass: 'mat-dialog-container-class',
      data: {element: this.listEmpruntVehicule[index]}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.ngxLoader.start();
        this.paginConfig.currentPage = 0;
        this.Exploitation.modifySelectedEmpruntVehicule(value3).subscribe(value2 => {
          this.getTotalItems();
          this.ngxLoader.stop();
          this.showNotification(this.snackBarSuccesModificationMsg);
        }, error2 => {
          this.ngxLoader.stop();
          this.showNotification(this.snackBarFailureModificationMsg);
        });
      }
    });
  }

  confirmRow(i: any) {
    const dialogRef = this.dialog.open(ConfirmEmpruntVehiculeComponent, {
      width: '540px',
      panelClass: 'mat-dialog-container-class',
      data: {id: i}
    });
    dialogRef.afterClosed().subscribe(value3 => {
      if (value3 !== undefined) {
        this.Exploitation.confirmSelectedEmpruntVehicule(i).subscribe(value2 => {
          this.Exploitation.getPaginationListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
            this.listEmpruntVehicule = value;
            this.dataSource = new MatTableDataSource<EmpruntVehicule>(this.listEmpruntVehicule);
            this.dataSource.sort = this.sort;
          }, error => {
            setTimeout(() => {
              this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
            }, 800);
          });
          setTimeout(() => {
            this.snackBar.open(this.snackBarSuccesConfirmationMsg, 'X', {duration: 3000});
          }, 800);
        }, error => {
          setTimeout(() => {
            this.snackBar.open(this.snackBarFailureConfirmationMsg, 'X', {duration: 3000});
          }, 800);
        });
      }
    });
  }

  getTotalItems() {
    this.Exploitation.getTotalItemListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      this.paginConfig.totalItems = value;
    });
    this.Exploitation.getPaginationListEmpruntVehiculeBySelectedStatusAndYear(this.etat, this.annee, this.paginConfig.currentPage.toString(), this.paginConfig.itemsPerPage.toString()).subscribe(value => {
      console.log(value);
      this.listEmpruntVehicule = value;
      this.dataSource = new MatTableDataSource<EmpruntVehicule>(this.listEmpruntVehicule);
      this.dataSource.sort = this.sort;
    }, error => {
      setTimeout(() => {
        this.snackBar.open(this.snackBarFailureLoadingMsg, 'X', {duration: 3000});
      }, 800);
    });
  }

  showNotification(notification: string) {
    setTimeout(() => {
      this.snackBar.open(notification, 'X', {duration: 3000});
    }, 800);
  }

}
